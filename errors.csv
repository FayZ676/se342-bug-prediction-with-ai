number,title,code,explanation
1,Infinite Recursion,"def print_numbers(n):\n    if n > 0:\n        print(n)\n        print_numbers(n)","The recursive call print_numbers(n) does not change the argument, leading to an infinite recursion and eventually a stack overflow error."
2,Mutable Default Argument,"def append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list","Using a list as a default argument will cause the function to use the same list on every call, leading to unexpected behavior when the function is called multiple times."
3,Name Shadowing,"input = 'saved input'\ndef process_input():\n    input = input.strip()  # Trying to use the global input\n    return input","The same name input is used for a variable inside the function and globally, leading to UnboundLocalError because the local variable input is referenced before assignment."
4,Off-by-One Error,"def sum_of_list(lst):\n    total = 0\n    for i in range(len(lst) + 1):\n        total += lst[i]\n    return total","range(len(lst) + 1) goes beyond the last index of the list causing an IndexError."
5,Scope Resolution Error,"x = 10\ndef scope_issue():\n    print(x)\n    x = 5\n    return x","Attempting to print the global variable x before it is locally assigned inside the function results in UnboundLocalError."
6,Type Mismatch,"def multiply_numbers(a, b):\n    return a * b\nprint(multiply_number('3', 4))","There is a typo in the function call (multiply_number instead of multiply_numbers) as well as a type mismatch, trying to multiply a string by an integer."
7,Key Error in Dictionary,"def get_item(dictionary, key):\n    return dictionary[key]","If the key does not exist in the dictionary, a KeyError will be raised. The function does not handle this potential exception."
8,Incorrect String Formatting,"def greet(name):\n    return f""Hello, {name}""\nprint(greet(John))","There are missing quotes around the string literal John when calling greet."
9,Floating Point Precision Error,"def check_float_equality(a, b):\n    return a == b","Floating point numbers may not compare equal due to precision errors, even if they are mathematically equivalent."
10,Logic Error,"def is_even(number):\n    return number % 2","Instead of returning a boolean, this function returns 1 for odd numbers and 0 for even numbers, which is the opposite of what the function name implies."
11,Integer Division,"def average(numbers):\n    return sum(numbers) / len(numbers)","In Python 2.x, this would cause an error if numbers are integers because it would perform integer division. In Python 3.x, this works correctly and gives a float, but it can be confusing if the programmer was expecting Python 2.x behavior."
12,Descriptor Access,"class MyClass:\n    my_attribute = ""value""\n    \ndef get_attribute_value(obj):\n    return obj.my_attribute\n\nmy_obj = MyClass()\nmy_obj.my_attribute = None\nprint(get_attribute_value(my_obj))","The function will return None instead of ""value"" due to the instance attribute my_attribute overshadowing the class attribute."
13,List Indexing,"def get_first_three_elements(sequence):\n    return sequence[3]","The function is supposed to return the first three elements but only returns the element at index 3, i.e., the fourth element."
14,Global State Change,"counter = 0\ndef increment_counter():\n    global counter\n    counter += 1","The function modifies a global variable counter, which can lead to unintended consequences by creating a side effect that might be hard to trace."
15,Incorrect File Handling,"def read_file_contents(file_name):\n    with open(file_name, ""w"") as file:\n        contents = file.read()\n    return contents","The file is opened with ""w"" mode which is for writing, so an attempt to read from it will fail since it truncates the file to zero length."